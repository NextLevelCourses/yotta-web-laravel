# ==========================================================
# üèóÔ∏è Yotta Aksara Production Deployment (via FTP)
# CI/CD Pipeline for Laravel Production Server
# ----------------------------------------------------------
# Purpose:
# - Automatically deploy when pushing to the "main" branch
# - Upload files via FTP (TLS supported)
# - Run Laravel optimization commands via SSH
# ==========================================================

name: Yotta Aksara Production (FTP Deployer)

on:
  push:
    branches: [ "main" ]

    # Define which paths trigger deployment
    paths:
      # === Git & CI files ===
      - ".github/workflows/cd-demoday.yml"
      
      # === Laravel Core ===
      - "app/**"
      - "bootstrap/**"
      - "config/**"
      - "routes/**"
      - "artisan"

      # === Deployment & Assets ===
      - "public/**"
      - "resources/**"
      - "storage/**"

      # === Database Schema ===
      - "database/**"

      # === Dependency & Config ===
      - "composer.json"
      - "composer.lock"

      # === Optional JS build config files ===
      - "package.json"
      - "vite.config.js"
      - "README.md"
      - "tests/**"
      # - "makefile"

jobs:
  deploy:
    name: Deploy Laravel to Production
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: production

    steps:
      # Step 1: Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug Info
        run: |
          echo "Commit message: ${{ github.event.head_commit.message }}"
          echo "Repository checked out successfully."
          ls -lah

      # Step 2: Deploy via FTP
      - name: Deploy Laravel via FTP
        uses: milanmk/actions-file-deployer@master
        with:
          # === Connection Config ===
          remote-protocol: "sftp"
          remote-host: ${{ secrets.FTP_SERVER }}
          remote-port: "65002"
          remote-user: ${{ secrets.FTP_USERNAME }}
          remote-password: ${{ secrets.FTP_PASSWORD }}
          remote-path: ${{ secrets.FTP_SERVER_DIR }}
          local-path: "./"


          # === Sync Options ===
          sync: "delta"                             # delta = only changed files
          debug: "false"

          # === Excluded Files/Folders ===
          sync-delta-excludes: |
            # === Git & CI files ===
            **/.gitignore
            **/.gitattributes

            # === Node & Build Cache ===
            **/node_modules/**
            **/package-lock.json

            # === Test & Local Dev ===
            **/tests/**
            **/phpunit.xml
            **/docker-compose.yml
            **/dockerfile
            **/makefile

            # === Logs & Temp Cache ===
            **/storage/logs/**
            **/storage/framework/cache/**
            **/storage/framework/sessions/**
            **/storage/framework/views/**

            # === Assets folder ===
            **/public/assets/**

            # === Documentation / Non-production ===
            **/LICENSE
            **/README.md

      # Step 3: Laravel Optimization via SSH
      - name: Run Laravel Optimization (SSH)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            set -ex
            echo "Connected to server: $(hostname)"
            cd ${{ secrets.FTP_SERVER_DIR }}

            if [ -f composer.json ]; then
              composer install --no-dev --optimize-autoloader
            fi

            echo "Clearing caches..."
            php artisan config:clear
            php artisan cache:clear
            php artisan route:clear
            php artisan view:clear

            echo "Rebuilding caches..."
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache

            echo "‚úÖ Deployment finished successfully!"
