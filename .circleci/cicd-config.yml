version: 2.1

# ======== REUSANBLE COMMANDS ========
commands:
  # command for docker
  docker-login:
    description: "Login ke DockerHub"
    steps:
      - run:
          name: DockerHub Login
          command: |
            echo "üîê Logging in to DockerHub ..."

            if [ -z "$DOCKERHUB_USERNAME" ] || [ -z "$DOCKERHUB_TOKEN" ]; then
              echo "‚ùå DOCKERHUB_USERNAME or DOCKERHUB_TOKEN is not set."
              exit 1
            fi

            if echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin; then
              echo "‚úÖ Successfully logged in to DockerHub as ${DOCKERHUB_USERNAME:0:2}***"
            else
              echo "‚ùå Failed to log in to DockerHub"
              exit 1
            fi

  build-image:
    description: "Build Docker Image"
    steps:
      - run:
          name: Build Docker Image
          command: |
            echo "üöÄ Building Docker image..."
            docker build -t yotta-dashboard:latest -f dockerfile .
            echo "‚úÖ Docker image built successfully."
            docker images -a

  # command for laravel
  laravel-optimize:
    description: "Clear & cache config Laravel"
    steps:
      - run:
          name: Laravel Optimize
          command: |
            # Clear caches
            echo "Optimizing Laravel application ..."
            docker exec yotta-dashboard php artisan config:clear || echo "‚ö†Ô∏è Failed config:clear"
            docker exec yotta-dashboard php artisan cache:clear || echo "‚ö†Ô∏è Failed cache:clear"
            docker exec yotta-dashboard php artisan route:clear || echo "‚ö†Ô∏è Failed route:clear"
            docker exec yotta-dashboard php artisan view:clear || echo "‚ö†Ô∏è Failed view:clear"
            echo "‚úÖ Laravel optimization complete."

            # Cache again
            echo "Caching Laravel configuration..."
            docker exec yotta-dashboard php artisan config:cache || echo "‚ö†Ô∏è Failed config:cache"
            docker exec yotta-dashboard php artisan route:cache || echo "‚ö†Ô∏è Failed route:cache"
            docker exec yotta-dashboard php artisan view:cache || echo "‚ö†Ô∏è Failed view:cache"
            echo "‚úÖ Laravel caching complete."

            # Display Laravel about information
            echo "Displaying Laravel about information..."
            docker exec yotta-dashboard php artisan about || echo "‚ö†Ô∏è Failed to display Laravel about"

            echo "‚úÖ Laravel optimization and caching process completed."

  laravel-migrate:
    description: "Run Laravel Migrations"
    steps:
      - run:
          name: Laravel Migrate
          command: |
            echo "üóÑÔ∏è Running Laravel database migrations ..."

            # Cek apakah container ada
            if ! docker ps --format '{{.Names}}' | grep -q '^yotta-dashboard$'; then
              echo "‚ùå Container yotta-dashboard not running."
              exit 1
            fi

            # Jalankan migration
            if docker exec yotta-dashboard php artisan migrate --force; then
              echo "‚úÖ Laravel migrations completed successfully."
            else
              echo "‚ùå Laravel migrations failed."
              docker exec yotta-dashboard php artisan migrate:status || echo "‚ö†Ô∏è Could not get migration status."
              exit 1
            fi

  laravel-migrate-fallback:
    description: "Run Laravel Migrations with fallback (Staging only)"
    steps:
      - run:
          name: Laravel Migrate with Fallback
          command: |
            CONTAINER="${CONTAINER_NAME:-yotta-dashboard}"
            echo "üóÑÔ∏è Starting Laravel migrations in container '$CONTAINER' at $(date)"

            if ! docker ps --format '{{.Names}}' | grep -q "^$CONTAINER\$"; then
              echo "‚ùå Container $CONTAINER not running."
              exit 1
            fi

            echo "‚û°Ô∏è Running migration..."
            if docker exec $CONTAINER php artisan migrate --force; then
              echo "‚úÖ Migrations completed successfully at $(date)"
            else
              echo "‚ö†Ô∏è Migration failed! Attempting rollback and retry (staging only)..."

              if docker exec $CONTAINER php artisan migrate:rollback --force; then
                echo "‚ôªÔ∏è Rollback successful."
              else
                echo "‚ö†Ô∏è Rollback failed!"
              fi

              echo "üîÑ Retrying migration..."
              if docker exec $CONTAINER php artisan migrate --force; then
                echo "‚úÖ Migration succeeded after rollback & retry."
              else
                echo "‚ùå Migration still failed after retry!"
                docker exec $CONTAINER php artisan migrate:status || echo "‚ö†Ô∏è Could not fetch migration status."
                exit 1
              fi
            fi

            echo "üìã Current migration status:"
            docker exec $CONTAINER php artisan migrate:status || echo "‚ö†Ô∏è Failed to fetch migration status."
            echo "üìù Laravel migration process completed at $(date)"

  # create .env and inject
  create-env:
    description: "Create Laravel .env file and generate APP_KEY"
    steps:
      - run:
          name: Generate .env with APP_KEY
          command: |
            set -e
            echo "‚öôÔ∏è Generating .env file..."

            # Hapus .env lama kalau ada
            [ -f .env ] && rm -f .env

            # Daftar variable wajib
            REQUIRED_KEYS=(
              APP_NAME
              APP_DEBUG
              APP_ENV
              APP_URL
              CACHE_DRIVER
              DB_CONNECTION
              DB_DATABASE
              DB_HOST
              DB_USERNAME
              DB_PASSWORD
              DB_PORT
              MAIL_FROM_NAME
              MAIL_MAILER
              QUEUE_CONNECTION
              SESSION_DRIVER
            )

            for key in "${REQUIRED_KEYS[@]}"; do
              value=${!key:-}
              if [ -z "$value" ]; then
                echo "‚ùå Missing required environment variable: $key"
                exit 1
              fi
              echo "$key=$value" >> .env
            done

  # Generate APP_KEY
  generate-app-key:
    description: "Generate Laravel APP_KEY"
    steps:
      - run:
          name: Generate APP_KEY
          command: |
            set -e
            ready=false

            # wait for container yotta-dashboard to be ready
            echo "‚è≥ Waiting for yotta-dashboard container to be ready..."
            for i in {1..20}; do
              if docker exec yotta-dashboard php -v >/dev/null 2>&1; then
                echo "‚úÖ Container yotta-dashboard is up (attempt $i)"
                ready=true
                break
              fi
              echo "Waiting... ($i)"
              sleep 3
            done

            if [ "$ready" != "true" ]; then
              echo "‚ùå Container yotta-dashboard never became ready."
              docker logs yotta-dashboard || true
              exit 1
            fi

            # Generate APP_KEY
            echo "üîë Generating Laravel APP_KEY..."
            KEY=$(docker exec yotta-dashboard php artisan key:generate --show)
            echo "APP_KEY=$KEY" >> .env
            echo "‚úÖ APP_KEY generated and injected: $KEY"

            # Copy ke container
            docker cp .env yotta-dashboard:/var/www/.env

            # Clear & cache konfigurasi
            docker exec yotta-dashboard php artisan config:clear
            docker exec yotta-dashboard php artisan config:cache

            # Preview .env di container (mask APP_KEY)
            docker exec yotta-dashboard cat /var/www/.env | sed 's/APP_KEY=.*/APP_KEY=***masked***/'

            echo "‚úÖ .env fully ready in container"

# Job thing
jobs:
  # =========== Testing Job ============
  Testing:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true

      # Copy .env
      - create-env

      # Run Docker Compose
      - run:
          name: Run Docker Compose
          command: |
            echo "üöÄ Starting services with Docker Compose..."
            # Run Docker Compose MySQL
            docker compose up -d --build mysql
            echo "‚úÖ Services MySQLstarted successfully."
            docker ps -a

            # Run Docker Compose Dashboard
            docker compose up -d --build dashboard
            echo "‚úÖ Services started successfully."
            docker ps -a

      # Wait for Yotta-MySQL to be ready
      - run:
          name: Wait for Services to be Ready
          command: |
            echo "Waiting for MySQL to be ready..."
            for i in {1..20}; do
              docker exec yotta-mysql sh -c 'mysql -u yotta -pyotta_pass -e "SELECT 1;"' && break
              echo "MySQL not ready yet..."
              sleep 2
            done
            echo "‚úÖ YottaMySQL is ready!"

      # Generate & Inject APP_KEY
      - run:
          name: php artisan package:discover
          command: |
            echo "‚è≥ Running php artisan package:discover inside container..."
            docker exec yotta-dashboard php artisan package:discover

      - generate-app-key

      # Kemungkinan besar disini akan gagal karna ENV untuk LoWaRon tidak terdefinisi
      # Laravel configuration
      - laravel-optimize
      - laravel-migrate

      - run:
          name: Health Check Laravel
          command: |
            success=false
            for i in {1..30}; do
              RESPONSE=$(docker exec yotta-dashboard curl -s -w " %{http_code}" http://127.0.0.1:8002/health || echo "000")
              BODY=$(echo "$RESPONSE" | sed 's/ [0-9]\{3\}$//')
              CODE=$(echo "$RESPONSE" | grep -oE '[0-9]{3}$')

              if [ "$CODE" = "200" ]; then
                echo "‚úÖ /health OK on attempt $i (body: $BODY)"
                success=true
                break
              else
                echo "Waiting for Laravel... ($CODE, body: $BODY)"
                sleep 3
              fi
            done

            if [ "$success" = false ]; then
              echo "‚ùå Health check failed after 30 attempts"
              docker logs yotta-dashboard || true
              docker exec yotta-dashboard tail -n 50 storage/logs/laravel.log || true
              exit 1
            fi

  # ========== Push to Docker Hub ============
  Push-To-Docker:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: true

      # Login ke Docker Hub
      - docker-login

      # Build image with latest Git tag and latest tag
      - run:
          name: Build image with latest Git tag and latest
          command: |
            echo "üöÄ Fetching all Git tags..."
            git fetch --tags

            # Ambil tag terakhir, fallback ke 'latest' kalau tidak ada
            TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "latest")
            IMAGE_TAG=$(echo ${TAG} | tr '/:*' '-' | tr '[:upper:]' '[:lower:]')

            echo "Using Git tag: $TAG"
            echo "Normalized Docker tag: $IMAGE_TAG"

            docker build -t ${DOCKERHUB_REPO}:$IMAGE_TAG -t ${DOCKERHUB_REPO}:latest -f dockerfile .
            echo "‚úÖ Docker image built successfully."

            # Verify image
            docker images -a | grep ${DOCKERHUB_REPO} | grep $IMAGE_TAG && echo "‚úÖ Image exists" || (echo "‚ùå Image build failed" && exit 1)

            # save IMAGE_TAG ke environment variable for future use
            echo "export IMAGE_TAG=$IMAGE_TAG" >> $BASH_ENV
            source $BASH_ENV
      # Push image to Docker Hub
      - run:
          name: Push image to Docker Hub
          command: |
            echo "üöÄ Pushing Docker image to Docker Hub..."
            docker push ${DOCKERHUB_REPO}:$IMAGE_TAG
            docker push ${DOCKERHUB_REPO}:latest
            echo "‚úÖ Docker image pushed successfully."

  # ========== Deployment to Staging Server ============
  Deploy-Staging:
    docker:
      - image: cimg/base:stable

    steps:
    # Add SSH key for dev-yotta
      - add_ssh_keys:
          fingerprints:
            - "SHA256:B0nVmApbymFWeHvPvtf1dWL0GFbsKiNrijvoITT7VH0" 

      # Setup Docker-in-Docker
      - setup_remote_docker:
          docker_layer_caching: true

      # Checkout code from repository
      - checkout

      - run:
          name: Deploy to Staging
          command: |
            ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "
              set -e
              cd /home/ubuntu/dev-yotta

              # 4.1 Pulling latest images
              echo 'üîÑ Pulling latest images...'
              docker pull $DOCKERHUB_REPO:latest

              # 4.2 Stopping old containers
              echo 'üõë Stopping old containers...'
              docker compose stop dashboard || true
              docker compose rm -f dashboard || true 

              # 4.3 Starting new containers
              echo 'üöÄ Starting dashboard...'
              docker compose up -d dashboard --remove-orphans
              
              # 4.4 Copy .env into container if needed
              DASHBOARD_CID=\$(docker compose ps -q dashboard)
              docker cp ./.env \$DASHBOARD_CID:/var/www/.env || true

              # 4.5 Running php artisan package:discover
              echo '‚è≥ Running php artisan package:discover inside container...'
              docker exec \$DASHBOARD_CID php artisan package:discover

              # 4.6 Running Laravel optimize
              echo 'üì¶ Running Laravel optimize...'
              make dy-laravel-optimize-all || {
                echo '‚ùå Optimize failed, last 50 log lines:'
                docker exec \$DASHBOARD_CID tail -n 50 storage/logs/laravel.log
                exit 1
              }

              # 4.7 Running Laravel migrate
              echo 'üóÑÔ∏è Running Laravel migrations...'
              docker compose exec dashboard php artisan migrate --force || {
                echo '‚ùå Migration failed, last 50 log lines:'
                docker exec \$DASHBOARD_CID tail -n 50 storage/logs/laravel.log
                exit 1
              }

              # 4.8 Checking public domain
              echo 'üåê Checking public domain (.env APP_URL)...'
              APP_URL=\$(grep ^APP_URL= .env | cut -d '=' -f2)
              for i in {1..20}; do
                STATUS=\$(curl -k -s -o /dev/null -w "%{http_code}" \${APP_URL}/ || echo 000)
                if [ \"\$STATUS\" = \"200\" ]; then
                  echo \"‚úÖ Domain \${APP_URL} OK (200)\"
                  break
                fi
                echo \"Domain not ready (\$STATUS), waiting 5s...\"
                sleep 5
              done

              # 4.9 Checking public domain
              echo '‚úÖ Deployment to STAGING completed!'
            "

#tambahkan
# --- php artisan package:discover
# --- jalan database dulu, baru dashboar,  lalu php artisan package:discover, make dy-laravel-optimize

# Deploy to Production Server is similar to deploy-to-staging
# it will be skipped and adding when production server is ready
# adding migration rollback for production

workflows:
  version: 2
  ci-cd:
    jobs:
      - Testing:
          context:
            - dockerhub
            - laravel_app
          filters:
            branches:
              only: main #Runs only when code is merged/pushed to main.
            tags:
              ignore: /.*/ # Ignore tags for Testing

      - Push-To-Docker:
          context:
            - dockerhub
          requires:
            - Testing
          filters:
            branches:
              only: main # Must be on main branch
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+$/ # Run only for version tags (e.g. v1.1.1)

      - Deploy-Staging:
          context:
            - deploy_server
          requires:
            - Push-To-Docker
          filters:
            branches:
              only: main # Must be on main branch
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+$/ # Run only for version tags (e.g. v1.1.1)

#tambahkan
# --- php artisan package:discover
# --- jalan database dulu, baru dashboar,  lalu php artisan package:discover, make dy-laravel-optimize