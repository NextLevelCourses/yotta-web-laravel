---
# ================================================================
# üìÅ File: .circleci/cicd-config.yml
# üìò CircleCI Configuration ‚Äî Laravel + Docker + Smart Deploy
# ================================================================
version: 2.1

# ================================================================
# üß© REUSABLE COMMANDS SECTION
# ================================================================
commands:

  # ---------------------------------------------------------------
  # üîê DOCKER LOGIN
  # ---------------------------------------------------------------
  docker-login:
    description: "Login to DockerHub using environment credentials"
    steps:
      - run:
          name: DockerHub Login
          command: |
            echo "üîê Logging in to DockerHub ..."

            if [ -z "$DOCKERHUB_USERNAME" ] || [ -z "$DOCKERHUB_TOKEN" ]; then
              echo "‚ùå DOCKERHUB_USERNAME or DOCKERHUB_TOKEN is not set."
              exit 1
            fi

            if echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin; then
              echo "‚úÖ Successfully logged in to DockerHub as ${DOCKERHUB_USERNAME:0:2}***"
            else
              echo "‚ùå Failed to log in to DockerHub"
              exit 1
            fi

  # ---------------------------------------------------------------
  # üèóÔ∏è DOCKER BUILD
  # ---------------------------------------------------------------
  build-image:
    description: "Build Docker image for Yotta Dashboard"
    steps:
      - run:
          name: Build Docker Image
          command: |
            echo "üöÄ Building Docker image..."
            docker build -t yotta-dashboard:latest -f dockerfile .
            echo "‚úÖ Docker image built successfully."
            docker images -a

  # ---------------------------------------------------------------
  # ‚öôÔ∏è LARAVEL OPTIMIZATION
  # ---------------------------------------------------------------
  laravel-optimize:
    description: "Clear and cache Laravel configuration for optimization"
    steps:
      - run:
          name: Laravel Optimize
          command: |
            echo "‚öôÔ∏è Optimizing Laravel application..."

            # Clear existing caches
            docker exec yotta-dashboard php artisan config:clear || echo "‚ö†Ô∏è Failed config:clear"
            docker exec yotta-dashboard php artisan cache:clear || echo "‚ö†Ô∏è Failed cache:clear"
            docker exec yotta-dashboard php artisan route:clear || echo "‚ö†Ô∏è Failed route:clear"
            docker exec yotta-dashboard php artisan view:clear || echo "‚ö†Ô∏è Failed view:clear"

            # Rebuild caches
            docker exec yotta-dashboard php artisan config:cache || echo "‚ö†Ô∏è Failed config:cache"
            docker exec yotta-dashboard php artisan route:cache || echo "‚ö†Ô∏è Failed route:cache"
            docker exec yotta-dashboard php artisan view:cache || echo "‚ö†Ô∏è Failed view:cache"

            echo "‚úÖ Laravel caching complete."

            # Display Laravel about information
            echo "Displaying Laravel about information..."
            docker exec yotta-dashboard php artisan about || echo "‚ö†Ô∏è Failed to display Laravel about"


            echo "‚úÖ Laravel optimization and caching completed."

  # ---------------------------------------------------------------
  # üóÑÔ∏è LARAVEL MIGRATION (STANDARD)
  # ---------------------------------------------------------------
  laravel-migrate:
    description: "Run Laravel database migrations safely"
    steps:
      - run:
          name: Laravel Migrate
          command: |
            echo "üóÑÔ∏è Running Laravel database migrations ..."

            # Ensure container is running
            if ! docker ps --format '{{.Names}}' | grep -q '^yotta-dashboard$'; then
              echo "‚ùå Container yotta-dashboard not running."
              exit 1
            fi

            # Run migration
            if docker exec yotta-dashboard php artisan migrate --force; then
              echo "‚úÖ Laravel migrations completed successfully."
            else
              echo "‚ùå Laravel migrations failed."
              docker exec yotta-dashboard php artisan migrate:status || echo "‚ö†Ô∏è Could not get migration status."
              exit 1
            fi

  # ---------------------------------------------------------------
  # üß† LARAVEL MIGRATION (FALLBACK STRATEGY)
  # ---------------------------------------------------------------
  laravel-migrate-fallback:
    description: "Run Laravel migrations with rollback fallback (for staging)"
    steps:
      - run:
          name: Laravel Migrate with Fallback
          command: |
            CONTAINER="${CONTAINER_NAME:-yotta-dashboard}"
            echo "üß† Starting Laravel migrations in container '$CONTAINER' at $(date)"

            if ! docker ps --format '{{.Names}}' | grep -q "^$CONTAINER\$"; then
              echo "‚ùå Container $CONTAINER not running."
              exit 1
            fi

            echo "‚û°Ô∏è Running migration..."
            if docker exec $CONTAINER php artisan migrate --force; then
              echo "‚úÖ Migrations completed successfully."
            else
              echo "‚ö†Ô∏è Migration failed! Attempting rollback + retry..."
              docker exec $CONTAINER php artisan migrate:rollback --force || echo "‚ö†Ô∏è Rollback failed!"
              docker exec $CONTAINER php artisan migrate --force || {
                echo "‚ùå Migration still failed after retry!"
                docker exec $CONTAINER php artisan migrate:status || true
                exit 1
              }
            fi

            docker exec $CONTAINER php artisan migrate:status || echo "‚ö†Ô∏è Could not fetch migration status."
            echo "üìù Laravel migration process completed at $(date)"

  # ---------------------------------------------------------------
  # üßæ GENERATE .ENV FILE
  # ---------------------------------------------------------------
  create-env:
    description: "Generate Laravel .env file without generating APP_KEY"
    steps:
      - run:
          name: Generate .env file
          command: |
            set -e
            echo "‚öôÔ∏è Generating .env file..."

            [ -f .env ] && rm -f .env

            REQUIRED_KEYS=(
              APP_NAME 
              APP_DEBUG 
              APP_ENV 
              APP_URL
              CACHE_DRIVER 
              DB_CONNECTION 
              DB_DATABASE
              DB_HOST 
              DB_USERNAME 
              DB_PASSWORD 
              DB_PORT
              MAIL_FROM_NAME 
              MAIL_MAILER 
              QUEUE_CONNECTION 
              SESSION_DRIVER
            )

            for key in "${REQUIRED_KEYS[@]}"; do
              value=${!key:-}
              if [ -z "$value" ]; then
                echo "‚ùå Missing required environment variable: $key"
                exit 1
              fi
              echo "$key=$value" >> .env
            done

            echo "‚úÖ .env file successfully generated."

  # ---------------------------------------------------------------
  # üîë GENERATE LARAVEL APP_KEY
  # ---------------------------------------------------------------
  generate-app-key:
    description: "Generate and inject Laravel APP_KEY into container"
    steps:
      - run:
          name: Generate APP_KEY
          command: |
            set -e
            ready=false
            echo "‚è≥ Waiting for yotta-dashboard container..."

            for i in {1..20}; do
              if docker exec yotta-dashboard php -v >/dev/null 2>&1; then
                echo "‚úÖ Container ready (attempt $i)"
                ready=true
                break
              fi
              sleep 3
            done

            if [ "$ready" != "true" ]; then
              echo "‚ùå Container never became ready."
              docker logs yotta-dashboard || true
              exit 1
            fi

            echo "üîë Generating Laravel APP_KEY..."
            KEY=$(docker exec yotta-dashboard php artisan key:generate --show)
            echo "APP_KEY=$KEY" >> .env
            docker cp .env yotta-dashboard:/var/www/.env

            docker exec yotta-dashboard php artisan config:clear
            docker exec yotta-dashboard php artisan config:cache
            echo "‚úÖ APP_KEY successfully generated and applied."

# ================================================================
# üöÄ JOBS SECTION
# ================================================================
jobs:

  # ---------------------------------------------------------------
  # ‚úÖ JOB 1: TESTING BUILD & ENV VALIDATION
  # ---------------------------------------------------------------
  Testing:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true

      - create-env

      - run:
          name: Run Docker Compose
          command: |
            echo "üöÄ Starting MySQL & Dashboard containers..."
            docker compose up -d --build mysql
            echo "‚úÖ MySQL started successfully."
            docker ps -a

            echo "üöÄ Starting Dashboard container..."
            docker compose up -d --build dashboard
            echo "‚úÖ Dashboard started successfully."
            docker ps -a

      - run:
          name: Wait for MySQL readiness
          command: |
            echo "‚è≥ Waiting for MySQL..."
            for i in {1..20}; do
              docker exec yotta-mysql sh -c 'mysql -u yotta -pyotta_pass -e "SELECT 1;"' && break
              echo "Still waiting..."
              sleep 2
            done
            echo "‚úÖ MySQL ready!"

      - run:
          name: php artisan package:discover
          command: docker exec yotta-dashboard php artisan package:discover

      - generate-app-key
      - laravel-optimize
      - laravel-migrate

      - run:
          name: Health Check Laravel
          command: |
            success=false
            for i in {1..30}; do
              RESPONSE=$(docker exec yotta-dashboard curl -s -w " %{http_code}" http://127.0.0.1:8002/health || echo "000")
              BODY=$(echo "$RESPONSE" | sed 's/ [0-9]\{3\}$//')
              CODE=$(echo "$RESPONSE" | grep -oE '[0-9]{3}$')

              if [ "$CODE" = "200" ]; then
                echo "‚úÖ /health OK on attempt $i (body: $BODY)"
                success=true
                break
              else
                echo "Waiting for Laravel... ($CODE, body: $BODY)"
                sleep 3
              fi
            done

            if [ "$success" = false ]; then
              echo "‚ùå Health check failed after 30 attempts"
              docker logs yotta-dashboard || true
              docker exec yotta-dashboard tail -n 50 storage/logs/laravel.log || true
              exit 1
            fi

  # ---------------------------------------------------------------
  # üê≥ JOB 2: PUSH DOCKER IMAGE TO HUB
  # ---------------------------------------------------------------
  Push-To-Docker:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true

      - docker-login

      - run:
          name: Build image with version tag + latest
          command: |
            git fetch --tags
            TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "latest")
            IMAGE_TAG=$(echo ${TAG} | tr '/:*' '-' | tr '[:upper:]' '[:lower:]')
            docker build -t ${DOCKERHUB_REPO}:$IMAGE_TAG -t ${DOCKERHUB_REPO}:latest -f dockerfile .
            docker images -a | grep ${DOCKERHUB_REPO} | grep $IMAGE_TAG
            echo "export IMAGE_TAG=$IMAGE_TAG" >> $BASH_ENV

      - run:
          name: Push image to DockerHub
          command: |
            docker push ${DOCKERHUB_REPO}:$IMAGE_TAG
            docker push ${DOCKERHUB_REPO}:latest
            echo "‚úÖ Image pushed to DockerHub successfully."

# ---------------------------------------------------------------
# üöÄ JOB: DEPLOY TO STAGING (SMART DEPLOY + LOGGING)
# ---------------------------------------------------------------
  Deploy-Staging:
    docker:
      - image: cimg/base:stable

    steps:
      - add_ssh_keys:
          fingerprints:
            - "SHA256:B0nVmApbymFWeHvPvtf1dWL0GFbsKiNrijvoITT7VH0"

      - checkout

      - run:
          name: Deploy to Staging (Auto Smart Deploy + Logging)
          command: |
            set -e

            BASE_DIR=/home/ubuntu/dev-yotta
            LOG_DIR=$BASE_DIR/LogsCICDStaging
            TIMESTAMP=$(date '+%Y%m%d-%H%M%S')
            LOG_PATH=$LOG_DIR/deploy-staging-$TIMESTAMP.log

            # Make sure logging dir exists locally (for SSH logging)
            mkdir -p $LOG_DIR
            touch $LOG_PATH
            echo "üßæ Logging deployment output to: $LOG_PATH" | tee -a $LOG_PATH

            # -----------------------------
            # ALWAYS: Prepare required directories on server
            # -----------------------------
            ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "
              set -e
              BASE_DIR=$BASE_DIR
              LOG_DIR=$LOG_DIR
              TIMESTAMP=$TIMESTAMP
              LOG_PATH=$LOG_PATH

              REQUIRED_DIRS=(
                \"\$BASE_DIR/html\"
                \"\$BASE_DIR/html/bootstrap/cache\"
                \"\$BASE_DIR/html/storage/app\"
                \"\$BASE_DIR/html/storage/framework/cache/data\"
                \"\$BASE_DIR/html/storage/framework/cache/laravel-excel\"
                \"\$BASE_DIR/html/storage/framework/sessions\"
                \"\$BASE_DIR/html/storage/framework/views\"
                \"\$BASE_DIR/html/storage/logs\"
                \"\$BASE_DIR/storage\"
                \"\$BASE_DIR/LogsCICDStaging\"
              )

              for dir in \${REQUIRED_DIRS[@]}; do
                if [ ! -d \"\$dir\" ]; then
                  echo \"üìÇ Creating missing directory: \$dir\" | tee -a \$LOG_PATH
                  mkdir -p \"\$dir\"
                else
                  echo \"‚úÖ Directory exists: \$dir\" | tee -a \$LOG_PATH
                fi
              done

              # Fix permissions
              echo 'üîí Fixing Laravel folder permissions...' | tee -a \$LOG_PATH
              sudo chown -R ubuntu:www-data \$BASE_DIR/html/storage \$BASE_DIR/html/bootstrap/cache
              sudo chmod -R 775 \$BASE_DIR/html/storage \$BASE_DIR/html/bootstrap/cache
              echo '‚úÖ All required directories ready.' | tee -a \$LOG_PATH
            "

            # -----------------------------
            # CHECK RUNNING CONTAINERS
            # -----------------------------
            RUNNING_SERVICES=$(ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP \
              "cd $BASE_DIR && docker compose ps --services --status running 2>/dev/null || true")

            if [ -n "$RUNNING_SERVICES" ]; then
              # Rolling update
              echo 'üîÑ Existing docker environment detected ‚Äî rolling update.' | tee -a $LOG_PATH
              ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "
                set -e
                cd $BASE_DIR
                if echo '$RUNNING_SERVICES' | grep -q 'dashboard'; then
                  echo 'üîÑ Updating dashboard container...' | tee -a $LOG_PATH
                  docker pull $DOCKERHUB_REPO:latest | tee -a $LOG_PATH
                  docker compose stop dashboard | tee -a $LOG_PATH
                  docker compose rm -f dashboard | tee -a $LOG_PATH
                  docker compose up -d dashboard --remove-orphans | tee -a $LOG_PATH
                  sleep 20
                fi
              "
            else
              # Fresh server
              echo 'üÜï Fresh server detected ‚Äî copying base files...' | tee -a $LOG_PATH
              ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "mkdir -p $BASE_DIR"
              scp -o StrictHostKeyChecking=no makefile $SERVER_USER@$SERVER_IP:$BASE_DIR/makefile
              scp -o StrictHostKeyChecking=no docker-compose.yml $SERVER_USER@$SERVER_IP:$BASE_DIR/docker-compose.yml
              echo '‚úÖ Base files copied via SCP.' | tee -a $LOG_PATH

              ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "
                set -e
                cd $BASE_DIR
                docker compose up -d mysql
                echo '‚è≥ Waiting MySQL to initialize...' 
                sleep 20
                docker compose up -d dashboard
              "
            fi

            # -----------------------------
            # POST-DEPLOY: Laravel Setup & Migration
            # -----------------------------
            ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "
              set -e
              cd $BASE_DIR
              DASHBOARD_CID=\$(docker compose ps -q dashboard)

              # Copy .env
              if [ -f \"$BASE_DIR/.env\" ]; then
                docker cp $BASE_DIR/.env \$DASHBOARD_CID:/var/www/.env
              else
                echo '‚ùå .env not found ‚Äî aborting!' | tee -a $LOG_PATH
                exit 1
              fi

              # Laravel optimize
              docker exec \$DASHBOARD_CID php artisan package:discover | tee -a \$LOG_PATH
              make dy-laravel-optimize-all | tee -a \$LOG_PATH

              # Smart migration
              FS_MIGRATIONS=\$(docker exec \$DASHBOARD_CID ls -1 database/migrations | sort)
              DB_MIGRATIONS=\$(docker exec \$DASHBOARD_CID php artisan migrate:status --no-interaction \
                | awk '/Yes/ {print \$NF}' | sort || true)
              DIFFERENCE=\$(comm -23 <(echo \"\$FS_MIGRATIONS\") <(echo \"\$DB_MIGRATIONS\") || true)

              if [ -n \"\$DIFFERENCE\" ]; then
                echo 'üÜï Running new migrations...' | tee -a \$LOG_PATH
                docker exec \$DASHBOARD_CID php artisan migrate --force || {
                  docker exec \$DASHBOARD_CID php artisan migrate:rollback --force
                  docker exec \$DASHBOARD_CID php artisan migrate --force
                }
              fi

              # Auto .env adjustments
              PUBLIC_IP=\$(curl -s https://api.ipify.org || echo '127.0.0.1')
              HOSTNAME=\$(hostname)
              docker exec \$DASHBOARD_CID sh -c \"
                sed -i 's|APP_URL=.*|APP_URL=https://\$PUBLIC_IP|g' /var/www/.env
                sed -i 's|APP_NAME=.*|APP_NAME=YOTTA-${HOSTNAME^^}|g' /var/www/.env
                php artisan config:clear
                php artisan config:cache
              \"

              # Health check
              APP_URL=\$(docker exec \$DASHBOARD_CID sh -c \"grep ^APP_URL= /var/www/.env | cut -d '=' -f2\")
              for i in {1..20}; do
                STATUS=\$(curl -k -s -o /dev/null -w '%{http_code}' \$APP_URL/health || echo 000)
                if [ \"\$STATUS\" = \"200\" ]; then break; fi
                sleep 5
              done

              echo '‚úÖ Deployment completed!' | tee -a \$LOG_PATH
            "

# ================================================================
# üîÑ WORKFLOW PIPELINE ORDER
# ================================================================
workflows:
  version: 2
  ci-cd:
    jobs:
      - Testing:
          context:
            - dockerhub
            - laravel_app
          filters:
            branches:
              only: development
            tags:
              ignore: /.*/

      - Push-To-Docker:
          context:
            - dockerhub
          requires:
            - Testing
          filters:
            branches:
              only: development
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+$/

      - Deploy-Staging:
          context:
            - deploy_server
            - dockerhub
          requires:
            - Push-To-Docker
          filters:
            branches:
              only: development
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+$/

# ================================================================
# üìò IMPLEMENTATION NOTES
# ================================================================
# ‚úÖ Pipeline Flow:
#    1. Testing ‚Üí Build and validate Laravel app
#    2. Push    ‚Üí Push built image to DockerHub
#    3. Deploy  ‚Üí Smart deploy to Staging server
#
# ‚öôÔ∏è Deployment Flow:
#    - Start database container first
#    - Start dashboard container
#    - Run php artisan package:discover
#    - Optimize and cache Laravel configs
#
# üß† Smart Migration:
#    - Run migrations only if new migration files exist
#    - Safe for repeated deploys
#
# üåê Auto Server Configuration:
#    - Automatically updates APP_URL and APP_NAME per server
# ================================================================