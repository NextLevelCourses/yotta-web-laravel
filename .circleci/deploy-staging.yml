version: 2.1
jobs:
  # ---------------------------------------------------------------
  # üöÄ JOB 3: DEPLOY TO STAGING (SMART DEPLOY + LOGGING)
  # ---------------------------------------------------------------
  Deploy-Staging:
    docker:
      - image: cimg/base:stable

    steps:
      - add_ssh_keys:
          fingerprints:
            - "SHA256:B0nVmApbymFWeHvPvtf1dWL0GFbsKiNrijvoITT7VH0"

      - checkout

      - run:
          name: Deploy to Staging (Auto Smart Deploy + Logging)
          command: |
            ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "
              set -e
              
              # ======================================================
              # üìú LOGGING SETUP
              # ======================================================
              BASE_DIR=/home/ubuntu/dev-yotta
              LOG_DIR=\$BASE_DIR/LogsCICDStaging
              TIMESTAMP=\$(date '+%Y%m%d-%H%M%S')
              LOG_PATH=\$LOG_DIR/deploy-staging-\$TIMESTAMP.log

              # Ensure base dir and permissions
              sudo mkdir -p \$BASE_DIR \$LOG_DIR
              sudo chown -R ubuntu:ubuntu \$BASE_DIR
              sudo chmod -R 775 \$BASE_DIR

              mkdir -p \$LOG_DIR
              touch \$LOG_PATH

              # üîê Log Rotation (hapus log >14 hari)
              find \$LOG_DIR -type f -mtime +14 -exec rm -f {} \; || true

              echo 'üßæ Logging deployment output to: \$LOG_PATH' | tee -a \$LOG_PATH

              # ======================================================
              # üß± PREPARE SERVER DIRECTORIES
              # ======================================================
              echo 'üìÅ Preparing required directories...' | tee -a \$LOG_PATH

              REQUIRED_DIRS=(
                \"\$BASE_DIR/html\"
                \"\$BASE_DIR/html/bootstrap/cache\"
                \"\$BASE_DIR/html/storage/app\"
                \"\$BASE_DIR/html/storage/framework/cache/data\"
                \"\$BASE_DIR/html/storage/framework/cache/laravel-excel\"
                \"\$BASE_DIR/html/storage/framework/sessions\"
                \"\$BASE_DIR/html/storage/framework/views\"
                \"\$BASE_DIR/html/storage/logs\"
                \"\$BASE_DIR/storage\"
                \"\$BASE_DIR/LogsCICDStaging\"
              )

              for dir in \${REQUIRED_DIRS[@]}; do
                if [ ! -d \"\$dir\" ]; then
                  echo \"üìÇ Creating missing directory: \$dir\" | tee -a \$LOG_PATH
                  mkdir -p \"\$dir\"
                else
                  echo \"‚úÖ Directory exists: \$dir\" | tee -a \$LOG_PATH
                fi
              done

              # Fix ownership & permissions for Laravel folders
              echo 'üîí Fixing Laravel folder permissions...' | tee -a \$LOG_PATH
              sudo chown -R ubuntu:www-data \$BASE_DIR/html/storage \$BASE_DIR/html/bootstrap/cache
              sudo chmod -R 775 \$BASE_DIR/html/storage \$BASE_DIR/html/bootstrap/cache

              echo '‚úÖ All required directories ready.' | tee -a \$LOG_PATH

              cd \$BASE_DIR
              echo 'üìÇ Moving to base directory: \$BASE_DIR'

              # ======================================================
              # üß† CHECK RUNNING CONTAINERS
              # ======================================================
              echo 'üîç Checking existing Docker services...' | tee -a \$LOG_PATH
              RUNNING_SERVICES=\$(docker compose ps --services --status running 2>/dev/null || true)

              if [ -n \"\$RUNNING_SERVICES\" ]; then
                echo 'üîÑ Existing docker environment detected ‚Äî proceeding with rolling update.' | tee -a \$LOG_PATH 

                if echo \"\$RUNNING_SERVICES\" | grep -q 'dashboard'; then
                  echo 'üîÑ Updating dashboard container...' | tee -a \$LOG_PATH

                  # ‚úÖ FIX: pull latest image
                  echo "‚ÑπÔ∏è Using Docker image: $DOCKERHUB_REPO:latest" | tee -a \$LOG_PATH
                  docker pull $DOCKERHUB_REPO:latest | tee -a \$LOG_PATH
                  docker compose stop dashboard | tee -a \$LOG_PATH
                  docker compose rm -f dashboard | tee -a \$LOG_PATH
          
                  # ‚úÖ FIX: restart dashboard properly after pull
                  echo 'üöÄ Starting dashboard container with new image...' | tee -a \$LOG_PATH
                  docker compose up -d dashboard --remove-orphans | tee -a \$LOG_PATH

                  # Wait a bit for container to initialize
                  echo '‚è≥ Waiting for dashboard to initialize...' | tee -a \$LOG_PATH
                  for i in {1..15}; do
                    DASHBOARD_CID=\$(docker compose ps -q dashboard)
                    if [ -n "\$DASHBOARD_CID" ]; then
                      STATUS=\$(docker inspect -f '{{.State.Status}}' \$DASHBOARD_CID 2>/dev/null || echo "none")

                      if [ "\$STATUS" = "running" ]; then
                        echo "‚úÖ Dashboard container is running (CID: \$DASHBOARD_CID)" | tee -a \$LOG_PATH
                        break
                      fi

                      echo "‚è≥ Dashboard status: \$STATUS (attempt \$i)" | tee -a \$LOG_PATH
                    else
                      echo "‚è≥ Dashboard container not detected yet (attempt \$i)" | tee -a \$LOG_PATH
                    fi
                    sleep 4
                  done

                  if [ "\$STATUS" != "running" ]; then
                    echo "‚ùå Dashboard failed to start after multiple checks." | tee -a \$LOG_PATH
                    docker compose logs dashboard | tail -n 50 | tee -a \$LOG_PATH
                    exit 1
                  fi

                  # ‚úÖ FIX: verify container started
                  DASHBOARD_CID=\$(docker compose ps -q dashboard)
                  if [ -z "$DASHBOARD_CID" ]; then
                    echo "‚ùå Dashboard failed to start properly ‚Äî aborting!" | tee -a \$LOG_PATH
                    docker compose logs dashboard | tail -n 20 | tee -a \$LOG_PATH
                    exit 1
                  else
                    echo "‚úÖ Dashboard container restarted successfully." | tee -a \$LOG_PATH
                  fi
                fi

              else
                echo 'üÜï Fresh environment detected ‚Äî running full setup...' | tee -a \$LOG_PATH

                # ======================================================
                # üß© PREPARE BASE STRUCTURE (Makefile & Docker Compose)
                # ======================================================
                echo 'üìÑ Copying Makefile and docker-compose.yml from repo...' | tee -a \$LOG_PATH
                mkdir -p \$BASE_DIR
                cp makefile \$BASE_DIR/makefile
                cp docker-compose.yml \$BASE_DIR/docker-compose.yml

                echo '‚úÖ Base infrastructure files copied.' | tee -a \$LOG_PATH

                # ======================================================
                # üóÑÔ∏è START MYSQL FIRST
                # ======================================================
                echo 'üê¨ Starting MySQL service...' | tee -a \$LOG_PATH
                docker compose down --remove-orphans || true
                docker compose up -d mysql | tee -a \$LOG_PATH

                echo '‚è≥ Waiting for MySQL to initialize...' | tee -a \$LOG_PATH
                for i in {1..20}; do
                  if docker exec \$(docker compose ps -q mysql) mysqladmin ping -h localhost --silent; then
                    echo '‚úÖ MySQL is ready.' | tee -a \$LOG_PATH
                    break
                  fi
                  echo '‚è≥ Waiting MySQL...' | tee -a \$LOG_PATH
                  sleep 5
                done

                # ======================================================
                # üß± THEN START DASHBOARD SERVICE
                # ======================================================
                echo 'üöÄ Starting dashboard service after MySQL is ready...' | tee -a \$LOG_PATH
                docker compose up -d dashboard --remove-orphans | tee -a \$LOG_PATH
              fi

              # ======================================================
              # ‚öôÔ∏è POST-DEPLOY LARAVEL SETUP
              # ======================================================
              DASHBOARD_CID=\$(docker compose ps -q dashboard)
              echo 'üì¶ Copying .env into container...' | tee -a \$LOG_PATH
              docker cp ./.env \$DASHBOARD_CID:/var/www/.env || true

              if [ -f ./.env.example ]; then docker cp ./.env.example \$DASHBOARD_CID:/var/www/.env.example || true; fi

              echo 'üîß Running php artisan package:discover...' | tee -a \$LOG_PATH
              docker exec \$DASHBOARD_CID php artisan package:discover | tee -a \$LOG_PATH

              echo '‚öôÔ∏è Optimizing Laravel configuration...' | tee -a \$LOG_PATH
              make dy-laravel-optimize-all | tee -a \$LOG_PATH

              # ======================================================
              # üß† SMART MIGRATION CHECK
              # ======================================================
              echo 'üß† Checking for pending migrations...' | tee -a \$LOG_PATH

              FS_MIGRATIONS=\$(docker exec \$DASHBOARD_CID ls -1 database/migrations | sort)
              DB_MIGRATIONS=\$(docker exec \$DASHBOARD_CID php artisan migrate:status --no-interaction \
                | awk '/Yes/ {print $NF}' \
                | sort || true)

              DIFFERENCE=\$(comm -23 <(echo \"\$FS_MIGRATIONS\") <(echo \"\$DB_MIGRATIONS\") || true)

              if [ -n \"\$DIFFERENCE\" ]; then
                echo 'üÜï Found new migrations:' | tee -a \$LOG_PATH
                echo \"\$DIFFERENCE\" | tee -a \$LOG_PATH
                echo '‚û°Ô∏è Running php artisan migrate --force ...' | tee -a \$LOG_PATH

                if docker exec \$DASHBOARD_CID php artisan migrate --force | tee -a \$LOG_PATH; then
                  echo '‚úÖ Migrations applied successfully.' | tee -a \$LOG_PATH
                else
                  echo '‚ö†Ô∏è Migration failed! Rolling back and retrying...' | tee -a \$LOG_PATH
                  docker exec \$DASHBOARD_CID php artisan migrate:rollback --force | tee -a \$LOG_PATH || true
                  docker exec \$DASHBOARD_CID php artisan migrate --force | tee -a \$LOG_PATH || {
                    echo '‚ùå Migration retry failed. Check logs.' | tee -a \$LOG_PATH
                    docker exec \$DASHBOARD_CID tail -n 50 /var/www/storage/logs/laravel.log | tee -a \$LOG_PATH
                    exit 1
                  }
                fi
              else
                echo '‚úÖ No new migrations found. Skipping migrate.' | tee -a \$LOG_PATH
              fi

              # ======================================================
              # üåê AUTO SERVER CONTEXT CONFIG
              # ======================================================
              echo 'üîç Adjusting .env automatically for current server...' | tee -a \$LOG_PATH
              PUBLIC_IP=\$(curl -s https://api.ipify.org || echo '127.0.0.1')
              HOSTNAME=\$(hostname)
              UPPER_HOSTNAME=\$(echo \$HOSTNAME | tr '[:lower:]' '[:upper:]')

              docker exec \$DASHBOARD_CID sh -c \"
                sed -i 's|APP_URL=.*|APP_URL=https://\$PUBLIC_IP|g' /var/www/.env
                sed -i 's|APP_NAME=.*|APP_NAME=YOTTA-\$UPPER_HOSTNAME|g' /var/www/.env
                php artisan config:clear
                php artisan config:cache
              \" | tee -a \$LOG_PATH

              echo '‚úÖ Server environment adjusted automatically.' | tee -a \$LOG_PATH

              # ======================================================
              # ü©∫ HEALTH CHECK
              # ======================================================
              echo 'üåê Performing health check...' | tee -a \$LOG_PATH
              APP_URL=\$(docker exec \$DASHBOARD_CID sh -c \"grep ^APP_URL= /var/www/.env | cut -d '=' -f2\")
              for i in {1..20}; do
                STATUS=\$(curl -k -s -o /dev/null -w '%{http_code}' \${APP_URL}/health || echo 000)
                if [ \"\$STATUS\" = \"200\" ]; then
                  echo \"‚úÖ Health check OK (\$APP_URL, HTTP 200)\" | tee -a \$LOG_PATH
                  break
                fi
                echo \"Waiting for Laravel... (status: \$STATUS)\" | tee -a \$LOG_PATH
                sleep 5
              done

              echo 'ü™µ Last 20 lines of deployment log:'
              tail -n 20 \$LOG_PATH

              echo '‚úÖ Deployment to STAGING completed successfully!' | tee -a \$LOG_PATH
            "


workflows:
  version: 2
  ci-cd:
    jobs:
      - Deploy-Staging:
          context:
            - deploy_server
            - dockerhub
          requires:
            - Push-To-Docker
          filters:
            branches:
              only: development
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+$/