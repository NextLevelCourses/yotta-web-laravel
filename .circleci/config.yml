version: 2.1

executors:
  docker-executor:
    docker:
      - image: cimg/base:stable

jobs:
  # ======================= BUILD & TEST ========================
  build-and-test:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Generate .env
          command: |
            echo "Generating .env file..."
            REQUIRED_KEYS=(
              APP_NAME
              APP_DEBUG
              APP_ENV
              APP_URL
              CACHE_DRIVER
              DB_CONNECTION
              DB_DATABASE
              DB_HOST
              DB_USERNAME
              DB_PASSWORD
              DB_PORT
              MAIL_FROM_NAME
              MAIL_MAILER
              QUEUE_CONNECTION
              SESSION_DRIVER
            )

            rm -f .env
            for key in "${REQUIRED_KEYS[@]}"; do
              value=${!key:-""}
              echo "$key=$value" >> .env
            done
            cat .env
      - run:
          name: Build Docker Image
          command: |
            echo "Building Docker image as latest..."
            docker build -t yotta-dashboard:latest -f dockerfile .
      - run:
          name: Run Docker Compose
          command: docker compose up -d --build
          
      # Wait for MySQL to be ready
      - run:
          name: Wait for MySQL
          command: |
            echo "Waiting for MySQL to be ready..."
            until docker exec yotta-mysql mysql -u $DB_USERNAME -p$DB_PASSWORD -e "SELECT 1" > /dev/null 2>&1; do
              echo "MySQL not ready yet..."
              sleep 2
            done
            echo "MySQL is ready!"

      - run:
          name: Laravel Setup & Migration
          command: |
            docker exec yotta-dashboard php artisan config:clear
            docker exec yotta-dashboard php artisan cache:clear
            docker exec yotta-dashboard php artisan config:cache
            docker exec yotta-dashboard php artisan migrate --force || { docker exec yotta-dashboard cat storage/logs/laravel.log; exit 1; }
            # docker exec yotta-dashboard php artisan db:seed --force || { docker exec yotta-dashboard cat storage/logs/laravel.log; exit 1; }
      - run:
          name: Test Laravel Health Endpoint
          command: |
            for i in {1..5}; do
              RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8002/health)
              if [ "$RESPONSE" = "200" ]; then
                echo "✅ /health endpoint OK"; break
              fi
              echo "Waiting for Laravel..."; sleep 5
            done
            if [ "$RESPONSE" != "200" ]; then
              echo "❌ /health endpoint failed"; exit 1
            fi

  # ====================== PUSH TO DOCKERHUB ========================
  push-to-dockerhub:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Docker Login
          command: echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Push Image
          command: |
            docker tag yotta-dashboard:latest $DOCKERHUB_REPO:latest
            docker push $DOCKERHUB_REPO:latest

  # ===================== DEPLOY TO STAGING ========================
  deploy-staging:
    docker:
      - image: cimg/base:stable
    steps:
      - add_ssh_keys
      - checkout
      - run:
          name: Deploy to Staging
          command: |
            ssh -o StrictHostKeyChecking=no $STAGING_USER@$STAGING_HOST "
              cd $STAGING_PATH
              if [ ! -f .env ]; then cp .env.example .env; fi
              docker pull $DOCKERHUB_REPO:latest

              # Stop & remove only yotta-dashboard container
              docker compose stop dashboard
              docker compose rm -f dashboard

              # Rebuild & start yotta-dashboard only
              docker compose up -d dashboard --build

              # Laravel migrations & seed
              docker exec yotta-dashboard php artisan migrate --force || { docker exec yotta-dashboard cat storage/logs/laravel.log; exit 1; }
              docker exec yotta-dashboard php artisan db:seed --force || { docker exec yotta-dashboard cat storage/logs/laravel.log; exit 1; }
            "

  # ==================== DEPLOY TO PRODUCTION ========================
  deploy-production:
    docker:
      - image: cimg/base:stable
    steps:
      - add_ssh_keys
      - checkout
      - run:
          name: Deploy to Production
          command: |
            ssh -o StrictHostKeyChecking=no $PROD_USER@$PROD_HOST "
              cd $PROD_PATH
              if [ ! -f .env ]; then cp .env.example .env; fi
              docker pull $DOCKERHUB_REPO:latest

              # Stop & remove only yotta-dashboard container
              docker compose stop dashboard
              docker compose rm -f dashboard

              # Rebuild & start yotta-dashboard only
              docker compose up -d dashboard --build

              # Laravel migrations
              docker exec yotta-dashboard php artisan migrate --force || { docker exec yotta-dashboard cat storage/logs/laravel.log; exit 1; }
            "

# ==================== WORKFLOWS ========================
workflows:
  version: 2
  ci-cd:
    jobs:
      - build-and-test:
          context: [global, staging]
          filters:
            branches:
              only: ci-cd/test
      - hold-push:
          type: approval
          requires:
            - build-and-test
      - push-to-dockerhub:
          requires:
            - hold-push
          context: [global]
      - hold-staging:
          type: approval
          requires:
            - push-to-dockerhub
      - deploy-staging:
          requires:
            - hold-staging
          context: [global, staging]
      - hold-production:
          type: approval
          requires:
            - push-to-dockerhub
      - deploy-production:
          requires:
            - hold-production
          context: [global]
