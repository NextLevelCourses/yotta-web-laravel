# # Use the latest 2.1 version of CircleCI pipeline process engine.
# # See: https://circleci.com/docs/reference/configuration-reference
# version: 2.1

# # Define a job to be invoked later in a workflow.
# # See: https://circleci.com/docs/guides/orchestrate/jobs-steps/#jobs-overview & https://circleci.com/docs/reference/configuration-reference/#jobs
# jobs:
#   say-hello:
#     # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
#     # See: https://circleci.com/docs/guides/execution-managed/executor-intro/ & https://circleci.com/docs/reference/configuration-reference/#executor-job
#     docker:
#       # Specify the version you desire here
#       # See: https://circleci.com/developer/images/image/cimg/base
#       - image: cimg/base:current

#     # Add steps to the job
#     # See: https://circleci.com/docs/guides/orchestrate/jobs-steps/#steps-overview & https://circleci.com/docs/reference/configuration-reference/#steps
#     steps:
#       # Checkout the code as the first step.
#       - checkout
#       - run:
#           name: "Say hello"
#           command: "echo Hello, World! dashboard iot"

# # Orchestrate jobs using workflows
# # See: https://circleci.com/docs/guides/orchestrate/workflows/ & https://circleci.com/docs/reference/configuration-reference/#workflows
# workflows:
#   say-hello-workflow: # This is the name of the workflow, feel free to change it to better match your workflow.
#     # Inside the workflow, you define the jobs you want to run.
#     jobs:
#       - say-hello

# CI/CD Configuration for CircleCI Testing

version: 2.1

# ======================================================
# CircleCI Environment Variables (Add these in Project Settings)
# ======================================================
#
# 1️⃣ Docker Hub Credentials
# DOCKERHUB_USERNAME   # Username akun Docker Hub, contoh: mydockeruser
# DOCKERHUB_PASSWORD   # Password atau Docker Hub token (gunakan secret)
# DOCKERHUB_REPO       # Repository Docker Hub, contoh: mydockeruser/yotta-aksara-energi
#
# 2️⃣ Staging Server Credentials
# STAGING_USER         # User SSH di server staging, contoh: ubuntu
# STAGING_HOST         # IP atau domain server staging, contoh: 123.45.67.89
# STAGING_PATH         # Path project di server staging, contoh: /home/ubuntu/dev-yotta

# =======================
# Executors
# =======================
executors:
  docker-executor:
    docker:
      - image: cimg/base:stable

# =======================
# Reusable Commands
# =======================
commands:
  # Install Docker Compose
  install-docker-compose:
    description: "Install Docker Compose"
    steps:
      - run:
          name: Install Docker Compose
          command: |
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" \
              -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker-compose --version

  # Wait for Laravel app + MySQL to be ready
  wait-for-app:
    description: "Wait for Laravel + MySQL to be ready"
    steps:
      - run:
          name: Wait for Laravel App
          command: |
            for i in {1..20}; do
              if docker exec yotta-dashboard curl -fs http://localhost:8002 > /dev/null; then
                echo "✅ Laravel app is up!"
                break
              else
                echo "⏳ Waiting for app... ($i/20)"
                sleep 10
              fi
            done
            if [ $i -eq 20 ]; then
              echo "❌ App did not start in time. Exiting..."
              docker-compose logs
              exit 1
            fi

      - run:
          name: Wait for MySQL
          command: |
            for i in {1..20}; do
              if docker exec yotta-dashboard php -r "new mysqli('mysql','yotta','yotta_pass','yotta_db');" 2>/dev/null; then
                echo "✅ MySQL is ready!"
                break
              else
                echo "⏳ Waiting for MySQL... ($i/20)"
                sleep 5
              fi
            done
            if [ $i -eq 20 ]; then
              echo "❌ MySQL did not start in time."
              exit 1
            fi

# =======================
# Jobs
# =======================

# -------------------------------
# Job 1: Build & Test Docker Image
# -------------------------------
jobs:
  build-and-test:
    executor: docker-executor
    steps:
      - checkout

      # Setup Docker to build images
      - setup_remote_docker:
          docker_layer_caching: true

      - install-docker-compose

      # -------------------------------
      # Build Docker image
      # -------------------------------
      - run:
          name: Build Docker Image
          command: |
            VERSION="v1.$CIRCLE_BUILD_NUM"
            echo "VERSION=$VERSION" > version.env
            docker build -t yotta-aksara-energi:$VERSION .

      # -------------------------------
      # Run Docker Compose & Health Check
      # -------------------------------
      - run:
          name: Run Docker Compose
          command: |
            if [ ! -f .env ]; then cp .env.example .env; fi
            docker-compose up -d

      - wait-for-app

      # -------------------------------
      # Laravel Migrations & Seeding
      # -------------------------------
      - run:
          name: Laravel Setup
          command: |
            docker exec yotta-dashboard php artisan migrate --force || { docker exec yotta-dashboard cat storage/logs/laravel.log; exit 1; }
            docker exec yotta-dashboard php artisan db:seed --force || { docker exec yotta-dashboard cat storage/logs/laravel.log; exit 1; }

      # -------------------------------
      # Cleanup containers
      # -------------------------------
      - run:
          name: Cleanup
          command: docker-compose down -v

# -------------------------------
# Job 2: Push Docker Image to Docker Hub
# -------------------------------
  push-to-dockerhub:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Login to Docker Hub
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Push Docker Image
          command: |
            VERSION=$(cat version.env | cut -d '=' -f2)
            # Push versi unik
            docker tag yotta-aksara-energi:$VERSION $DOCKERHUB_REPO:$VERSION
            docker push $DOCKERHUB_REPO:$VERSION
            # Optional push latest tag
            docker tag yotta-aksara-energi:$VERSION $DOCKERHUB_REPO:latest
            docker push $DOCKERHUB_REPO:latest

# -------------------------------
# Job 3: Deploy to Staging
# -------------------------------
  deploy-staging:
    docker:
      - image: cimg/base:stable
    steps:
      - add_ssh_keys
      - checkout
      - run:
          name: Deploy to Staging
          command: |
            VERSION=$(cat version.env | cut -d '=' -f2)
            ssh -o StrictHostKeyChecking=no $STAGING_USER@$STAGING_HOST "
              set -e
              cd $STAGING_PATH
              docker pull $DOCKERHUB_REPO:$VERSION
              docker-compose down -v || true
              docker-compose up -d --build
              # Health check MySQL
              for i in {1..20}; do
                if docker exec yotta-dashboard php -r \"new mysqli('mysql','yotta','yotta_pass','yotta_db');\" 2>/dev/null; then break; fi
                sleep 5
              done
              # Run migrations & seeding
              docker exec yotta-dashboard php artisan migrate --force || { docker exec yotta-dashboard cat storage/logs/laravel.log; exit 1; }
              docker exec yotta-dashboard php artisan db:seed --force || { docker exec yotta-dashboard cat storage/logs/laravel.log; exit 1; }
            "

# =======================
# Workflows
# =======================
workflows:
  version: 2
  build-test-deploy:
    jobs:
      # Step 1: Build & test Docker image
      - build-and-test

      # Step 2: Push Docker image to Docker Hub
      - push-to-dockerhub:
          requires:
            - build-and-test
          filters:
            branches:
              only:
                - ci-cd/deploy

      # Step 3: Deploy to staging
      - deploy-staging:
          requires:
            - push-to-dockerhub
          filters:
            branches:
              only:
                - ci-cd/deploy
