# # Use the latest 2.1 version of CircleCI pipeline process engine.
# # See: https://circleci.com/docs/reference/configuration-reference
# version: 2.1

# # Define a job to be invoked later in a workflow.
# # See: https://circleci.com/docs/guides/orchestrate/jobs-steps/#jobs-overview & https://circleci.com/docs/reference/configuration-reference/#jobs
# jobs:
#   say-hello:
#     # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
#     # See: https://circleci.com/docs/guides/execution-managed/executor-intro/ & https://circleci.com/docs/reference/configuration-reference/#executor-job
#     docker:
#       # Specify the version you desire here
#       # See: https://circleci.com/developer/images/image/cimg/base
#       - image: cimg/base:current

#     # Add steps to the job
#     # See: https://circleci.com/docs/guides/orchestrate/jobs-steps/#steps-overview & https://circleci.com/docs/reference/configuration-reference/#steps
#     steps:
#       # Checkout the code as the first step.
#       - checkout
#       - run:
#           name: "Say hello"
#           command: "echo Hello, World! dashboard iot"

# # Orchestrate jobs using workflows
# # See: https://circleci.com/docs/guides/orchestrate/workflows/ & https://circleci.com/docs/reference/configuration-reference/#workflows
# workflows:
#   say-hello-workflow: # This is the name of the workflow, feel free to change it to better match your workflow.
#     # Inside the workflow, you define the jobs you want to run.
#     jobs:
#       - say-hello

# ======= CI/CD Configuration for CircleCI  Testing =======

version: 2.1

# Note: Tambahkan variable & secret di GitHub repo
# DOCKERHUB_USERNAME=
# DOCKERHUB_PASSWORD=
# DOCKERHUB_REPO=xamppsulmar/yotta-aksara-energi
# STAGING_USER=
# STAGING_HOST=
# STAGING_PATH=/home/ubuntu/dev-yotta

executors:
  docker-executor:
    docker:
      - image: cimg/base:stable

jobs:
  # -------------------------------
  # Job 1: Build & Test Docker Image
  # -------------------------------
  build-and-test:
    executor: docker-executor
    steps:
      - checkout
      #adding remote docker to build docker image
      - setup_remote_docker

      # Install docker-compose
      - run:
          name: Install Docker Compose
          command: |
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" \
              -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker-compose --version

      # build docker image based on build number
      - run:
          name: Build Docker image & determine version
          command: |
            VERSION="v1.$CIRCLE_BUILD_NUM"
            echo "VERSION=$VERSION" > version.env
            docker build -t yotta-aksara-energi:$VERSION .

            # mungkin dibutuhkan jika ingin push ke docker hub
            # docker tag yotta-aksara-energi:$VERSION $DOCKERHUB_REPO:$VERSION

      # run docker compose
      - run:
          name: Run tests inside Docker container
          command: |           
            if [ ! -f .env ]; then cp .env.example .env; fi
            VERSION=$(cat version.env | cut -d '=' -f2)
            docker-compose up -d
                  
            # Wait for Laravel app to be ready (HTTP health-check)
            for i in {1..20}; do
              if docker exec yotta-dashboard curl -fs http://localhost:8002 > /dev/null; then
                echo "‚úÖ App is up!"
                break
              else
                echo "‚è≥ Waiting for app... ($i/20)"
                sleep 10
              fi
            done
            # if the app is not up after 200 seconds, exit with error
            if [ $i -eq 20 ]; then
              echo "‚ùå App did not start in time. Exiting..."
              docker-compose logs
              exit 1
            fi

            # Wait for MySQL before running migrations
            echo "‚è≥ Waiting for MySQL to be ready..."
            for i in {1..20}; do
              if docker exec yotta-dashboard php -r "new mysqli('mysql','yotta','yotta_pass','yotta_db');" 2>/dev/null; then
                echo "‚úÖ MySQL is ready!"
                break
              else
                echo "‚è≥ Waiting for MySQL... ($i/20)"
                sleep 5
              fi
            done

            # setup laravel
            if ! docker exec yotta-dashboard php artisan migrate --force; then
              echo "‚ùå Migration failed, showing Laravel logs..."
              docker exec yotta-dashboard cat storage/logs/laravel.log || true
              exit 1
            fi

            if ! docker exec yotta-dashboard php artisan db:seed --force; then
              echo "‚ùå DB seed failed, showing Laravel logs..."
              docker exec yotta-dashboard cat storage/logs/laravel.log || true
              exit 1
            fi
 

            # done testing, stop and remove containers
            echo "‚úÖ Laravel app ready"
            docker-compose down -v


  # # -------------------------------
  # # Job 2: Deploy ke Staging
  # # -------------------------------
  deploy-staging:
    docker:
      - image: cimg/base:stable
    steps:
      - add_ssh_keys # perlu dicari tau kembali
      - run:
          name: "Deploy to Staging Server"
          command: |
            ssh -o StrictHostKeyChecking=no $STAGING_USER@$STAGING_HOST "  # perlukan setup ssh di circleci
              set -e
              cd $STAGING_PATH && \ # masuk ke direktori project di server diperlukan setup env variable STAGING_PATH di circleci
              echo 'üì• Pulling latest image...' && \
              docker pull $DOCKERHUB_REPO:latest && \ # perlu push image ke docker hub di job sebelumnya atau buat pipeline terpisah
              echo 'üöÄ Restarting container...' && \
              docker-compose down -v || true && \
              docker-compose up -d --build && \
              echo '‚è≥ Waiting for MySQL...' && \
              for i in {1..20}; do
                if docker exec yotta-dashboard php -r \"new mysqli('mysql','yotta','yotta_pass','yotta_db');\" 2>/dev/null; then
                  echo '‚úÖ MySQL is ready!'
                  break
                else
                  echo 'Waiting MySQL... (\$i/20)'
                  sleep 5
                fi
              done && \
              echo '‚öôÔ∏è Running migrations...' && \
              docker exec yotta-dashboard php artisan migrate --force || { docker exec yotta-dashboard cat storage/logs/laravel.log || true; exit 1; } && \
              echo 'üå± Seeding database...' && \
              docker exec yotta-dashboard php artisan db:seed --force || { docker exec yotta-dashboard cat storage/logs/laravel.log || true; exit 1; } && \
              echo '‚úÖ Deployment completed successfully!'
            "

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build-and-test
      - deploy-staging:
          requires:
            - build-and-test
          filters:
            branches:
              only: 
                - ci-cd/deploy  # deploy hanya jika push ke branch develop