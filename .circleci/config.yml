version: 2.1

executors:
  docker-executor:
    docker:
      - image: cimg/base:stable

jobs:
  # ======================= BUILD & TEST ========================
jobs:
  # ======================= BUILD & TEST ========================
  build-and-test:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true

      # Generate .env tanpa APP_KEY dulu
      - run:
          name: Generate .env (tanpa APP_KEY)
          command: |
            echo "Generating .env file..."
            REQUIRED_KEYS=(
              APP_NAME
              APP_DEBUG
              APP_ENV
              APP_URL
              CACHE_DRIVER
              DB_CONNECTION
              DB_DATABASE
              DB_HOST
              DB_USERNAME
              DB_PASSWORD
              DB_PORT
              MAIL_FROM_NAME
              MAIL_MAILER
              QUEUE_CONNECTION
              SESSION_DRIVER
            )

            rm -f .env
            for key in "${REQUIRED_KEYS[@]}"; do
              value=${!key:-""}
              echo "$key=$value" >> .env
            done
            cat .env

      # Build Docker image
      - run:
          name: Build Docker Image
          command: |
            echo "Building Docker image as latest..."
            docker build -t yotta-dashboard:latest -f dockerfile .

      # Start services
      - run:
          name: Run Docker Compose
          command: docker compose up -d --build

      # Wait until MySQL ready
      - run:
          name: Wait for MySQL
          command: |
            echo "Waiting for MySQL to be ready..."
            for i in {1..20}; do
              docker exec yotta-mysql sh -c 'mysql -u yotta -pyotta_pass -e "SELECT 1;"' && break
              echo "MySQL not ready yet..."
              sleep 2
            done
            echo "‚úÖ MySQL is ready!"

      # Generate APP_KEY and inject into container
      - run:
          name: Generate & Inject APP_KEY
          command: |
            echo "Generating Laravel APP_KEY..."
            KEY=$(docker exec yotta-dashboard php artisan key:generate --show)
            echo "APP_KEY=$KEY" >> .env
            echo "‚úÖ APP_KEY injected: $KEY"

            # Copy .env ke container
            docker cp .env yotta-dashboard:/var/www/.env

            # Clear & cache ulang konfigurasi
            docker exec yotta-dashboard php artisan config:clear
            docker exec yotta-dashboard php artisan config:cache

      # Laravel setup & migration
      - run:
          name: Laravel Setup & Migration
          command: |
            # Clear caches
            docker exec yotta-dashboard php artisan config:clear
            docker exec yotta-dashboard php artisan cache:clear
            docker exec yotta-dashboard php artisan route:clear
            docker exec yotta-dashboard php artisan view:clear

            # Rebuild caches
            docker exec yotta-dashboard php artisan config:cache
            docker exec yotta-dashboard php artisan route:cache
            docker exec yotta-dashboard php artisan view:cache

            # Run migrations (with log output if failed)
            docker exec yotta-dashboard php artisan migrate --force \
              || { docker exec yotta-dashboard cat storage/logs/laravel.log; exit 1; }

      # Health check
      - run:
          name: Health Check Laravel (tolerant)
          command: |
            success=false
            for i in {1..30}; do
              RESPONSE=$(docker exec yotta-dashboard curl -s -w " %{http_code}" http://127.0.0.1:8002/health || echo "000")
              BODY=$(echo "$RESPONSE" | sed 's/ [0-9]\{3\}$//')
              CODE=$(echo "$RESPONSE" | grep -oE '[0-9]{3}$')

              if [ "$CODE" = "200" ]; then
                echo "‚úÖ /health OK on attempt $i (body: $BODY)"
                success=true
                break
              else
                echo "Waiting for Laravel... ($CODE, body: $BODY)"
                sleep 3
              fi
            done

            if [ "$success" = false ]; then
              echo "‚ùå Health check failed after 30 attempts"
              docker logs yotta-dashboard || true
              docker exec yotta-dashboard tail -n 50 storage/logs/laravel.log || true
              exit 1
            fi

  # ====================== PUSH TO DOCKERHUB ========================
  push-to-dockerhub:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Login to Docker Hub
          command: |
            echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

      - run:
          name: Extract Git Tag / Branch
          command: |
            # Ambil nama branch atau tag
            if [ -n "$CIRCLE_TAG" ]; then
              IMAGE_TAG="$CIRCLE_TAG"
            else
              IMAGE_TAG="$CIRCLE_BRANCH"
            fi
            echo "export IMAGE_TAG=$IMAGE_TAG" >> $BASH_ENV

      - run:
          name: Build & Push Docker Image
          command: |
            source $BASH_ENV
            echo "Building image with tags: $DOCKERHUB_REPO:$IMAGE_TAG and :latest"

            # Build sekali saja lalu push dengan 2 tag
            docker build -t $DOCKERHUB_REPO:$IMAGE_TAG -t $DOCKERHUB_REPO:latest -f app/Dockerfile ./app
            docker push $DOCKERHUB_REPO:$IMAGE_TAG
            docker push $DOCKERHUB_REPO:latest

  # ===================== DEPLOY TO STAGING ========================
  deploy-staging:
    docker:
      - image: cimg/base:stable

    steps:
      - add_ssh_keys # Menambahkan kunci SSH dari konteks sesuai projek
      - checkout

      - run:
          name: Deploy to Staging
          command: |
            ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "
              set -e

              cd /home/ubuntu/dev-yotta

              # Pastikan .env ada
              if [ ! -f .env ]; then
                cp .env.example .env
              fi

              echo 'üîÑ Pull image terbaru...'
              docker pull $DOCKERHUB_REPO:latest

              echo 'üõë Hentikan container lama...'
              docker compose stop dashboard || true
              docker compose rm -f dashboard || true

              echo 'üöÄ Jalankan container baru...'
              docker compose up -d dashboard --remove-orphans

              # Ambil container ID untuk service "dashboard"
              DASHBOARD_CID=\$(docker compose ps -q dashboard)

              echo '‚è≥ Tunggu aplikasi siap (health endpoint)...'
              for i in {1..20}; do
                STATUS=\$(docker exec \$DASHBOARD_CID curl -s -o /dev/null -w "%{http_code}" http://0.0.0.0:8002/health || echo 000)
                if [ \"\$STATUS\" = \"200\" ]; then
                  echo '‚úÖ Service sehat & siap!'
                  break
                fi
                echo \"Service belum siap (\$STATUS), tunggu 3s...\"
                sleep 3
              done

              echo 'üì¶ Jalankan laravel optimize'
              make dy-laravel-optimize-all || { 
                echo '‚ùå Optimize gagal, log terakhir:'
                docker exec \$DASHBOARD_CID tail -n 50 storage/logs/laravel.log
                exit 1
              }

              docker compose exec dashboard php artisan migrate --force || {
                echo '‚ùå Migration gagal, log terakhir:'
                docker exec \$DASHBOARD_CID tail -n 50 storage/logs/laravel.log
                exit 1
              }

              docker compose exec dashboard php artisan db:seed --force || {
                echo '‚ùå Seeder gagal, log terakhir:'
                docker exec \$DASHBOARD_CID tail -n 50 storage/logs/laravel.log
                exit 1
              }

              echo '‚úÖ Deploy selesai ke STAGING!'
            "

# ==================== DEPLOY TO PRODUCTION ========================
  deploy-production:
    docker:
      - image: cimg/base:stable

    steps:
      - add_ssh_keys
      - checkout

      - run:
          name: Deploy to Production
          command: |
            ssh -o StrictHostKeyChecking=no $PROD_USER@$PROD_HOST "
              set -e

              cd $PROD_PATH

              # Pastikan .env ada
              if [ ! -f .env ]; then
                cp .env.example .env
              fi

              echo 'üîÑ Pull image terbaru...'
              docker pull $DOCKERHUB_REPO:latest

              echo 'üõë Hentikan container lama...'
              docker compose stop dashboard || true
              docker compose rm -f dashboard || true

              echo 'üöÄ Jalankan container baru...'
              docker compose up -d dashboard --remove-orphans

              echo '‚è≥ Tunggu aplikasi siap (health endpoint)...'
              for i in {1..20}; do
                STATUS=\$(docker exec yotta-dashboard curl -s -o /dev/null -w "%{http_code}" http://localhost:8002/health || echo 000)
                if [ \"\$STATUS\" = \"200\" ]; then
                  echo '‚úÖ Service sehat & siap!'
                  break
                fi
                echo \"Service belum siap (\$STATUS), tunggu 3s...\"
                sleep 3
              done

              echo 'üì¶ Jalankan laravel optimize'
              make dy-laravel-optimize-all || { 
                echo '‚ùå optimize gagal, log terakhir:'
                docker exec yotta-dashboard tail -n 50 storage/logs/laravel.log
                exit 1
              }

              echo 'üì¶ Jalankan migration...'
              docker compose -f docker-compose.yml exec dashboard php artisan migrate || { 
                echo '‚ùå Migration gagal, log terakhir:'
                docker exec yotta-dashboard tail -n 50 storage/logs/laravel.log
                exit 1
              }

              echo '‚úÖ Deploy selesai ke PRODUCTION!'
            "

# ==================== WORKFLOWS ========================
workflows:
  version: 2
  ci-cd:
    jobs:
      # ==================== BUILD & TEST (branch only) ====================
      - build-and-test:
          context: [global, staging]
          filters:
            branches:
              only: ci-cd/test
            tags:
              ignore: /.*/

      - hold-push:
          type: approval
          requires:
            - build-and-test
          filters:
            branches:
              only: ci-cd/test
            tags:
              ignore: /.*/

      # ==================== PUSH TO DOCKER HUB (tag only) ====================
      - push-to-dockerhub:
          requires:
            - hold-push
          context: [global]
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      # ==================== DEPLOY TO STAGING (manual) ====================
      - hold-staging:
          type: approval
          requires:
            - push-to-dockerhub
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - deploy-staging:
          requires:
            - hold-staging
          context: [global, staging]
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      # ==================== DEPLOY TO PRODUCTION (manual) ====================
      - hold-production:
          type: approval
          requires:
            - push-to-dockerhub
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - deploy-production:
          requires:
            - hold-production
          context: [global]
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/