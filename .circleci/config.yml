# # Use the latest 2.1 version of CircleCI pipeline process engine.
# # See: https://circleci.com/docs/reference/configuration-reference
# version: 2.1

# # Define a job to be invoked later in a workflow.
# # See: https://circleci.com/docs/guides/orchestrate/jobs-steps/#jobs-overview & https://circleci.com/docs/reference/configuration-reference/#jobs
# jobs:
#   say-hello:
#     # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
#     # See: https://circleci.com/docs/guides/execution-managed/executor-intro/ & https://circleci.com/docs/reference/configuration-reference/#executor-job
#     docker:
#       # Specify the version you desire here
#       # See: https://circleci.com/developer/images/image/cimg/base
#       - image: cimg/base:current

#     # Add steps to the job
#     # See: https://circleci.com/docs/guides/orchestrate/jobs-steps/#steps-overview & https://circleci.com/docs/reference/configuration-reference/#steps
#     steps:
#       # Checkout the code as the first step.
#       - checkout
#       - run:
#           name: "Say hello"
#           command: "echo Hello, World! dashboard iot"

# # Orchestrate jobs using workflows
# # See: https://circleci.com/docs/guides/orchestrate/workflows/ & https://circleci.com/docs/reference/configuration-reference/#workflows
# workflows:
#   say-hello-workflow: # This is the name of the workflow, feel free to change it to better match your workflow.
#     # Inside the workflow, you define the jobs you want to run.
#     jobs:
#       - say-hello

# ======= CI/CD Configuration for CircleCI  Testing =======

version: 2.1

# Note: Tambahkan variable & secret di GitHub repo
# DOCKERHUB_USERNAME=
# DOCKERHUB_PASSWORD=
# DOCKERHUB_REPO=xamppsulmar/yotta-aksara-energi
# STAGING_USER=
# STAGING_HOST=
# STAGING_PATH=/home/ubuntu/dev-yotta

executors:
  docker-executor:
    docker:
      - image: cimg/base:stable

jobs:
  # -------------------------------
  # Job 1: Build & Test Docker Image
  # -------------------------------
  build-and-test:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build Docker image & determine version
          command: |
            VERSION="v1.$CIRCLE_BUILD_NUM"
            echo "VERSION=$VERSION" > version.env
            make dy-build
      - run:
          name: Run tests & check endpoint
          command: |
            source version.env
            if [ ! -f .env ]; then cp .env.example .env; fi
            make dy-start
            docker-compose run --rm dashboard npm test
            sleep 5
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8002/health)
            if [ "$STATUS" -ne 200 ]; then
              echo "❌ Endpoint test failed! Status code: $STATUS"
              make dy-stop
              exit 1
            else
              echo "✅ Endpoint test success! Status code: $STATUS"
            fi
            make dy-stop
      - persist_to_workspace:
          root: .
          paths:
            - version.env

  # # -------------------------------
  # # Job 2: Push Docker Image
  # # -------------------------------
  # push-image:
  #   executor: docker-executor
  #   steps:
  #     - setup_remote_docker
  #     - attach_workspace:
  #         at: .
  #     - run:
  #         name: Push Docker image to Docker Hub
  #         command: |
  #           source version.env
  #           echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
  #           docker tag $DOCKERHUB_REPO:$VERSION $DOCKERHUB_REPO:${CIRCLE_SHA1}
  #           docker tag $DOCKERHUB_REPO:$VERSION $DOCKERHUB_REPO:latest
  #           docker push $DOCKERHUB_REPO:$VERSION
  #           docker push $DOCKERHUB_REPO:${CIRCLE_SHA1}
  #           docker push $DOCKERHUB_REPO:latest

  # # -------------------------------
  # # Job 3: Deploy ke Staging dengan Rollback + Endpoint test
  # # -------------------------------
  # deploy-staging:
  #   executor: docker-executor
  #   steps:
  #     - add_ssh_keys:
  #         fingerprints:
  #           - "xx:xx:xx:xx" # Ganti dengan fingerprint SSH key di CircleCI
  #     - attach_workspace:
  #         at: .
  #     - run:
  #         name: Deploy to staging with rollback & endpoint check
  #         command: |
  #           source version.env
  #           ssh -o StrictHostKeyChecking=no $STAGING_USER@$STAGING_HOST "
  #             cd $STAGING_PATH &&
  #             if docker ps -q -f name=dashboard > /dev/null; then
  #               BACKUP_NAME=dashboard_backup_\$(date +%s)
  #               docker rename dashboard \$BACKUP_NAME
  #             else
  #               BACKUP_NAME=
  #             fi
  #             docker pull $DOCKERHUB_REPO:$VERSION
  #             make dy-start
  #             if ! make dy-migrate; then
  #               echo 'Migration failed! Rolling back...'
  #               make dy-stop
  #               if [ ! -z \"\$BACKUP_NAME\" ]; then
  #                 docker rename \$BACKUP_NAME dashboard
  #                 docker start dashboard
  #               fi
  #               exit 1
  #             fi
  #             sleep 5
  #             STATUS=\$(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:8002/health)
  #             if [ \"\$STATUS\" -ne 200 ]; then
  #               echo '❌ Endpoint test failed! Rolling back... Status code:' \$STATUS
  #               make dy-stop
  #               if [ ! -z \"\$BACKUP_NAME\" ]; then
  #                 docker rename \$BACKUP_NAME dashboard
  #                 docker start dashboard
  #               fi
  #               exit 1
  #             else
  #               echo '✅ Endpoint test success! Status code:' \$STATUS
  #             fi
  #             if [ ! -z \"\$BACKUP_NAME\" ]; then
  #               docker rm -f \$BACKUP_NAME 2>/dev/null || true
  #             fi
  #             echo 'Deploy successful!'
  #           "

workflows:
  version: 2
  build-test-push-deploy:
    jobs:
      - build-and-test:
          filters:
            branches:
              only:
                - ci-cd/test
      # - push-image:
      #     requires:
      #       - build-and-test
      # - deploy-staging:
      #     requires:
      #       - push-image

